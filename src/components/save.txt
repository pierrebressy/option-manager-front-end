import * as d3 from 'd3';
import Form from 'react-bootstrap/Form';
import Container from 'react-bootstrap/Container';
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import { useState, useEffect } from 'react';
import { IContractRow } from '../interfaces/datatypes';
import * as Contract from './classContracts';
import { v4 as uuidv4 } from 'uuid';
import * as consts from "../services/constants"

class StrategyChart {

    margin: { top: number, right: number, bottom: number, left: number };
    frame_width: number;
    frame_height: number;
    width: number;
    height: number;
    id: string;
    svg: any;
    x: any;
    y: any;
    yRight: any;
    xAxis: any;
    yAxis: any;
    yAxisRight: any;
    xmin: number = 0;
    xmax: number = 0;
    ymin: number = 0;
    ymax: number = 0;
    clipPath: string;

    constructor(id: string) {

        this.id = id;
        this.margin = consts.strategyChartDefaultMargin
        this.frame_width = consts.strategyChartDefaultSize.width;
        this.frame_height = consts.strategyChartDefaultSize.height;
        this.width = this.frame_width - this.margin.left - this.margin.right;
        this.height = this.frame_height - this.margin.top - this.margin.bottom;
        this.clipPath = uuidv4()
    }

    drawVerticalLineAtStrike(contract: any, currentPriceValue: number = 0.0) {

        let point0 = [contract.getStrike(), 0];
        let pointB = [contract.getStrike(), 1];

        if (contract.getType() === "Credit Call Spread") {
            this.svg.append("line")
                .attr("stroke", "gray")
                .attr("stroke-width", 0.5)
                .attr("x1", this.x(contract.soldCall.getStrike()))
                .attr("y1", this.yRight(-1))
                .attr("x2", this.x(contract.soldCall.getStrike()))
                .attr("y2", this.yRight(+1))
                .attr("stroke-dasharray", "8,1");
            this.svg.append("circle")
                .attr("r", 5)
                .attr("fill", "green")
                .style("stroke", "white")
                .attr("opacity", 1)
                .attr("visibility", "visible")
                .attr("cx", this.x(contract.soldCall.getStrike()))
                .attr("cy", this.y(contract.getMaxProfit()))
            this.svg.append("text")
                .attr("x", this.x(contract.soldCall.getStrike()))
                .attr("y", this.yRight(0) + 30)
                .attr("class", "strategy_text_green")
                .attr("clip-path", "url(#" + this.clipPath + ")")
                .text("STRIKE1")
            this.svg.append("line")
                .attr("stroke", "gray")
                .attr("stroke-width", 0.5)
                .attr("x1", this.x(contract.boughtCall.getStrike()))
                .attr("y1", this.yRight(-1))
                .attr("x2", this.x(contract.boughtCall.getStrike()))
                .attr("y2", this.yRight(+1))
                .attr("stroke-dasharray", "8,1");
            this.svg.append("circle")
                .attr("r", 5)
                .attr("fill", "red")
                .style("stroke", "white")
                .attr("opacity", 1)
                .attr("visibility", "visible")
                .attr("cx", this.x(contract.boughtCall.getStrike()))
                .attr("cy", this.y(contract.getMaxLost()))
            this.svg.append("text")
                .attr("x", this.x(contract.boughtCall.getStrike()))
                .attr("y", this.yRight(0) + 30)
                .attr("class", "strategy_text_red")
                .attr("clip-path", "url(#" + this.clipPath + ")")
                .text("STRIKE2")
        }
        else if (contract.getType() === "Credit Put Spread") {
            this.svg.append("line")
                .attr("stroke", "gray")
                .attr("stroke-width", 0.5)
                .attr("x1", this.x(contract.boughtPut.getStrike()))
                .attr("y1", this.yRight(-1))
                .attr("x2", this.x(contract.boughtPut.getStrike()))
                .attr("y2", this.yRight(+1))
                .attr("stroke-dasharray", "8,1");
            this.svg.append("circle")
                .attr("r", 5)
                .attr("fill", "red")
                .style("stroke", "white")
                .attr("opacity", 1)
                .attr("visibility", "visible")
                .attr("cx", this.x(contract.boughtPut.getStrike()))
                .attr("cy", this.y(contract.getMaxLost()))
            this.svg.append("text")
                .attr("x", this.x(contract.boughtPut.getStrike()))
                .attr("y", this.yRight(0) + 30)
                .attr("class", "strategy_text_red")
                .attr("clip-path", "url(#" + this.clipPath + ")")
                .text("STRIKE1")
            this.svg.append("line")
                .attr("stroke", "gray")
                .attr("stroke-width", 0.5)
                .attr("x1", this.x(contract.soldPut.getStrike()))
                .attr("y1", this.yRight(-1))
                .attr("x2", this.x(contract.soldPut.getStrike()))
                .attr("y2", this.yRight(+1))
                .attr("stroke-dasharray", "8,1");
            this.svg.append("circle")
                .attr("r", 5)
                .attr("fill", "green")
                .style("stroke", "white")
                .attr("opacity", 1)
                .attr("visibility", "visible")
                .attr("cx", this.x(contract.soldPut.getStrike()))
                .attr("cy", this.y(contract.getMaxProfit()))
            this.svg.append("text")
                .attr("x", this.x(contract.soldPut.getStrike()))
                .attr("y", this.yRight(0) + 30)
                .attr("class", "strategy_text_green")
                .attr("clip-path", "url(#" + this.clipPath + ")")
                .text("STRIKE2")
        }
        else if (contract.getType() === "Debit Call Spread") {
            this.svg.append("line")
                .attr("stroke", "gray")
                .attr("stroke-width", 0.5)
                .attr("x1", this.x(contract.boughtCall.getStrike()))
                .attr("y1", this.yRight(-1))
                .attr("x2", this.x(contract.boughtCall.getStrike()))
                .attr("y2", this.yRight(+1))
                .attr("stroke-dasharray", "8,1");
            this.svg.append("circle")
                .attr("r", 5)
                .attr("fill", "red")
                .style("stroke", "white")
                .attr("opacity", 1)
                .attr("visibility", "visible")
                .attr("cx", this.x(contract.boughtCall.getStrike()))
                .attr("cy", this.y(contract.getMaxLost()))
            this.svg.append("text")
                .attr("x", this.x(contract.boughtCall.getStrike()))
                .attr("y", this.yRight(0) + 30)
                .attr("class", "strategy_text_red")
                .attr("clip-path", "url(#" + this.clipPath + ")")
                .text("STRIKE1")

            this.svg.append("line")
                .attr("stroke", "gray")
                .attr("stroke-width", 0.5)
                .attr("x1", this.x(contract.soldCall.getStrike()))
                .attr("y1", this.yRight(-1))
                .attr("x2", this.x(contract.soldCall.getStrike()))
                .attr("y2", this.yRight(+1))
                .attr("stroke-dasharray", "8,1");
            this.svg.append("circle")
                .attr("r", 5)
                .attr("fill", "green")
                .style("stroke", "white")
                .attr("opacity", 1)
                .attr("visibility", "visible")
                .attr("cx", this.x(contract.soldCall.getStrike()))
                .attr("cy", this.y(contract.getMaxProfit()))
            this.svg.append("text")
                .attr("x", this.x(contract.soldCall.getStrike()))
                .attr("y", this.yRight(0) + 30)
                .attr("class", "strategy_text_green")
                .attr("clip-path", "url(#" + this.clipPath + ")")
                .text("STRIKE2")
        }
        else if (contract.getType() === "Debit Put Spread") {
            this.svg.append("line")
                .attr("stroke", "gray")
                .attr("stroke-width", 0.5)
                .attr("x1", this.x(contract.soldPut.getStrike()))
                .attr("y1", this.yRight(-1))
                .attr("x2", this.x(contract.soldPut.getStrike()))
                .attr("y2", this.yRight(+1))
                .attr("stroke-dasharray", "8,1");
            this.svg.append("circle")
                .attr("r", 5)
                .attr("fill", "green")
                .style("stroke", "white")
                .attr("opacity", 1)
                .attr("visibility", "visible")
                .attr("cx", this.x(contract.soldPut.getStrike()))
                .attr("cy", this.y(contract.getMaxProfit()))
            this.svg.append("text")
                .attr("x", this.x(contract.soldPut.getStrike()))
                .attr("y", this.yRight(0) + 30)
                .attr("class", "strategy_text_green")
                .attr("clip-path", "url(#" + this.clipPath + ")")
                .text("STRIKE1")

            this.svg.append("line")
                .attr("stroke", "gray")
                .attr("stroke-width", 0.5)
                .attr("x1", this.x(contract.boughtPut.getStrike()))
                .attr("y1", this.yRight(-1))
                .attr("x2", this.x(contract.boughtPut.getStrike()))
                .attr("y2", this.yRight(+1))
                .attr("stroke-dasharray", "8,1");
            this.svg.append("circle")
                .attr("r", 5)
                .attr("fill", "red")
                .style("stroke", "white")
                .attr("opacity", 1)
                .attr("visibility", "visible")
                .attr("cx", this.x(contract.boughtPut.getStrike()))
                .attr("cy", this.y(contract.getMaxLost()))
            this.svg.append("text")
                .attr("x", this.x(contract.boughtPut.getStrike()))
                .attr("y", this.yRight(0) + 30)
                .attr("class", "strategy_text_red")
                .attr("clip-path", "url(#" + this.clipPath + ")")
                .text("STRIKE2")
        }
        else if (contract.getType() === "Long") {
        }
        else if (contract.getType() === "Short") {
        }
        else {
            this.svg.append("line")
                .attr("stroke", "gray")
                .attr("stroke-width", 0.5)
                .attr("x1", this.x(contract.getStrike()))
                .attr("y1", this.yRight(-1))
                .attr("x2", this.x(contract.getStrike()))
                .attr("y2", this.yRight(+1))
                .attr("stroke-dasharray", "8,1");
            this.svg.append("circle")
                .attr("r", 5)
                .attr("fill", contract.getInitialCost() >= 0 ? "green" : "red")
                .style("stroke", "white")
                .attr("opacity", 1)
                .attr("visibility", "visible")
                .attr("cx", this.x(contract.getStrike()))
                .attr("cy", this.y(contract.getInitialCost()))
            this.svg.append("text")
                .attr("x", this.x(contract.getStrike()))
                .attr("y", this.yRight(0) + 30)
                .attr("class", "strategy_text")
                .attr("clip-path", "url(#" + this.clipPath + ")")
                .text("STRIKE")
        }


        this.svg.append("circle")
            .attr("r", 4)
            .attr("fill", "cyan")
            .style("stroke", "white")
            .attr("opacity", 1)
            .attr("visibility", "visible")
            .attr("cx", this.x(contract.getBreakEvenValue()))
            .attr("cy", this.yRight(0))

        this.svg.append("text")
            .attr("x", this.x(contract.getBreakEvenValue()))
            .attr("y", this.yRight(0) - 15)
            .attr("class", "strategy_text_cyan")
            .attr("clip-path", "url(#" + this.clipPath + ")")
            .text("BREAK-EVEN")





        this.svg.append("line")
            .attr("stroke", "gray")
            .attr("stroke-width", 0.8)
            .attr("x1", this.x(currentPriceValue))
            .attr("y1", this.yRight(-1))
            .attr("x2", this.x(currentPriceValue))
            .attr("y2", this.yRight(1))
            .style("stroke", "magenta")
            .attr("stroke-dasharray", "8,1")

        this.svg.append("text")
            .attr("x", this.x(currentPriceValue) + 5)
            .attr("y", this.yRight(-0.5) + 45)
            .attr("transform", "rotate(90," + (this.x(currentPriceValue) + 5) + "," + (this.yRight(-0.5) + 45) + ")")
            .attr("class", "strategy_text_magenta")
            .attr("clip-path", "url(#" + this.clipPath + ")")
            .text("CURRENT PRICE")


    }

    drawSigmaLines(data_sigma: number[][], data_sigma_int: number[][], contract: any,
        success_rate: number, currentPriceValue: number = 0.0, sigma: number = 0.0) {


        const line_sigma = d3.line()
            .x(d => this.x(d[0]))
            .y(d => this.yRight(d[1]));

        this.svg.append("path")
            .datum(data_sigma)
            .attr("class", "line")
            .attr("fill", "none")
            .attr("stroke", 'magenta')
            .attr("stroke-width", 1)
            .attr("visibility", "visible")
            .attr("clip-path", "url(#" + this.clipPath + ")")
            .attr("d", line_sigma as any);

        this.svg.append("circle")
            .attr("r", 4)
            .attr("fill", "black")
            .style("stroke", "white")
            .attr("opacity", 1)
            .attr("visibility", "visible")
            .attr("cx", this.x(currentPriceValue))
            .attr("cy", this.yRight(0))

        this.svg.append("path")
            .datum(data_sigma_int)
            .attr("class", "line")
            .attr("fill", "none")
            .attr("stroke", 'rgb(10, 82, 216)')
            .attr("stroke-width", 1)
            .attr("visibility", "visible")
            .attr("clip-path", "url(#" + this.clipPath + ")")
            .attr("d", line_sigma as any);

        // success rate line
        this.svg.append("line")
            .attr("stroke", "gray")
            .attr("stroke-width", 0.5)
            .attr("x1", this.x(contract.getStrike()))
            .attr("y1", this.yRight(success_rate))
            .attr("x2", this.x(this.xmax))
            .attr("y2", this.yRight(success_rate))
            .attr("stroke-dasharray", "8,1");
        this.svg.append("line")
            .attr("stroke", "gray")
            .attr("stroke-width", 0.5)
            .attr("x1", this.x(contract.getStrike()))
            .attr("y1", this.yRight(0))
            .attr("x2", this.x(contract.getStrike()))
            .attr("y2", this.yRight(success_rate))
            .attr("stroke-dasharray", "8,1");
        this.svg.append("rect")
            .attr("class", "crosshair_price_rect")
            .attr("visibility", "visible")
            .attr("x", this.x(this.xmax))
            .attr("y", this.yRight(success_rate) - 10)
            .attr("width", 50)
            .attr("height", 20)
        this.svg.append("text")
            .attr("class", "crosshair_date_text")
            .attr("x", this.x(this.xmax) + 20)
            .attr("y", this.yRight(success_rate) + 4)
            .text((100. * success_rate).toFixed(0).toString() + '%');
        this.svg.append("circle")
            .attr("r", 4)
            .attr("fill", "black")
            .style("stroke", "white")
            .attr("opacity", 1)
            .attr("visibility", "visible")
            .attr("cx", this.x(contract.getStrike()))
            .attr("cy", this.yRight(success_rate))

        this.svg.append("line")
            .attr("stroke", "gray")
            .attr("stroke-width", 0.5)
            .attr("x1", this.x(currentPriceValue))
            .attr("y1", this.yRight(-1))
            .attr("x2", this.x(currentPriceValue))
            .attr("y2", this.yRight(1))
            .attr("stroke-dasharray", "8,1")

        this.svg.append("line")
            .attr("stroke", "gray")
            .attr("stroke-width", 0.5)
            .attr("x1", this.x(currentPriceValue + sigma))
            .attr("y1", this.yRight(-1))
            .attr("x2", this.x(currentPriceValue + sigma))
            .attr("y2", this.yRight(1))
            .attr("clip-path", "url(#" + this.clipPath + ")")
            .attr("stroke-dasharray", "8,1")

        this.svg.append("line")
            .attr("stroke", "gray")
            .attr("stroke-width", 0.5)
            .attr("x1", this.x(currentPriceValue - sigma))
            .attr("y1", this.yRight(-1))
            .attr("x2", this.x(currentPriceValue - sigma))
            .attr("y2", this.yRight(1))
            .attr("clip-path", "url(#" + this.clipPath + ")")
            .attr("stroke-dasharray", "8,1")

        this.svg.append("line")
            .attr("stroke", "gray")
            .attr("stroke-width", 0.5)
            .attr("x1", this.x(currentPriceValue + 2 * sigma))
            .attr("y1", this.yRight(-1))
            .attr("x2", this.x(currentPriceValue + 2 * sigma))
            .attr("y2", this.yRight(1))
            .attr("clip-path", "url(#" + this.clipPath + ")")
            .attr("stroke-dasharray", "8,1")

        this.svg.append("line")
            .attr("stroke", "gray")
            .attr("stroke-width", 0.5)
            .attr("x1", this.x(currentPriceValue - 2 * sigma))
            .attr("y1", this.yRight(-1))
            .attr("x2", this.x(currentPriceValue - 2 * sigma))
            .attr("y2", this.yRight(1))
            .attr("clip-path", "url(#" + this.clipPath + ")")
            .attr("stroke-dasharray", "8,1")

        this.svg.append("line")
            .attr("stroke", "gray")
            .attr("stroke-width", 0.5)
            .attr("x1", this.x(currentPriceValue + 3 * sigma))
            .attr("y1", this.yRight(-1))
            .attr("x2", this.x(currentPriceValue + 3 * sigma))
            .attr("y2", this.yRight(1))
            .attr("clip-path", "url(#" + this.clipPath + ")")
            .attr("stroke-dasharray", "8,1")

        this.svg.append("line")
            .attr("stroke", "gray")
            .attr("stroke-width", 0.5)
            .attr("x1", this.x(currentPriceValue - 3 * sigma))
            .attr("y1", this.yRight(-1))
            .attr("x2", this.x(currentPriceValue - 3 * sigma))
            .attr("y2", this.yRight(1))
            .attr("clip-path", "url(#" + this.clipPath + ")")
            .attr("stroke-dasharray", "8,1")

        this.svg.append("text")
            .attr("x", this.x(currentPriceValue - 1 * sigma))
            .attr("y", this.yRight(0) - 15)
            .attr("class", "strategy_text")
            .attr("clip-path", "url(#" + this.clipPath + ")")
            .text("-σ")

        this.svg.append("text")
            .attr("x", this.x(currentPriceValue + 1 * sigma))
            .attr("y", this.yRight(0) - 15)
            .attr("class", "strategy_text")
            .attr("clip-path", "url(#" + this.clipPath + ")")
            .text("+σ")

        this.svg.append("text")
            .attr("x", this.x(currentPriceValue - 2 * sigma))
            .attr("y", this.yRight(0) - 15)
            .attr("class", "strategy_text")
            .attr("clip-path", "url(#" + this.clipPath + ")")
            .text("-2σ")

        this.svg.append("text")
            .attr("x", this.x(currentPriceValue + 2 * sigma))
            .attr("y", this.yRight(0) - 15)
            .attr("class", "strategy_text")
            .attr("clip-path", "url(#" + this.clipPath + ")")
            .text("+2σ")

        this.svg.append("text")
            .attr("x", this.x(currentPriceValue - 3 * sigma))
            .attr("y", this.yRight(0) - 15)
            .attr("class", "strategy_text")
            .attr("clip-path", "url(#" + this.clipPath + ")")
            .text("-3σ")

        this.svg.append("text")
            .attr("x", this.x(currentPriceValue + 3 * sigma))
            .attr("y", this.yRight(0) - 15)
            .attr("class", "strategy_text")
            .attr("clip-path", "url(#" + this.clipPath + ")")
            .text("+3σ")


    }

    drawContractProfile(contract: any) {
        try {
            contract.drawProfile(this.svg, this.x, this.y, this.clipPath, this.xmin, this.xmax)

        }
        catch (e) {
            console.log('drawContractProfile::e=', e);
        }
    }

    displayInitialCostInfo(contract: any) {
        this.svg.append("circle")
            .attr("r", 4)
            .attr("fill", "black")
            .style("stroke", "white")
            .attr("opacity", 1)
            .attr("visibility", "visible")
            .attr("cx", this.x(this.xmin))
            .attr("cy", this.y(contract.getInitialCost()))

        this.svg.append("rect")
            .attr("class", contract.getInitialCost() > 0 ? "crosshair_price_rect_green" : "crosshair_price_rect_red")
            .attr("visibility", "visible")
            .attr("x", this.x(this.xmin) - 50)
            .attr("y", this.y(contract.getInitialCost()) - 10)
            .attr("width", 50)
            .attr("height", 20)

        this.svg.append("text")
            .attr("class", "crosshair_price_text_white")
            .attr("x", this.x(this.xmin) - 25)
            .attr("y", this.y(contract.getInitialCost()) + 4)
            .text(contract.getInitialCost().toFixed(0).toString());
        //.text(-contract.getOpenTotalPremium().toFixed(0).toString());
    }

    prepareChartScales(contract: any, currentPriceValue: number = 0.0, sigma: number = 0.0) {

        //this.xmin = currentPriceValue - 5 * sigma
        //this.xmax = currentPriceValue + 5 * sigma
        this.xmin = currentPriceValue * (1 - 0.4)
        this.xmax = currentPriceValue * (1 + 0.4)

        let yLimits = contract.getYlimits()
        this.ymin = yLimits[0]
        this.ymax = yLimits[1]

        this.x = d3.scaleLinear().domain([this.xmin, this.xmax]).range([0, this.width]);
        this.y = d3.scaleLinear().domain([this.ymin, this.ymax] as [number, number]).range([this.height, 0]);

        this.xAxis = d3.axisBottom(this.x);
        this.yAxis = d3.axisLeft(this.y);
        this.yRight = d3.scaleLinear().domain([0, +1] as [number, number]).range([this.height / 2, 0]);
        this.yAxisRight = d3.axisRight(this.yRight);
    }

    cleanChart() {
        const svg_tmp = d3.select("#" + this.id)
        svg_tmp.selectAll("*").remove();
    }

    setupChart() {
        this.svg = d3.select("#" + this.id).append("svg")
            .attr("width", this.frame_width)
            .attr("height", this.frame_height)
            .append("g")
            .attr("transform", `translate(${this.margin.left},${this.margin.top})`);

        this.svg.append("defs").append("svg:clipPath")
            .attr("id", this.clipPath)
            .append("svg:rect")
            .attr("width", this.width)
            .attr("height", this.height)
            .attr("x", 0)
            .attr("y", 0);
    }

    addAxis() {
        this.svg.append("g")
            .attr("transform", `translate(0,${this.height / 2})`)
            .call(this.xAxis);

        this.svg.append("g")
            .attr("id", "yAxis" + this.id)
            .attr("transform", `translate(0,0)`)
            .call(this.yAxis);

        this.svg.append("g")
            .attr("id", "yAxisRight" + this.id)
            .attr("transform", `translate(${this.width},0)`)
            .call(this.yAxisRight);

    }

    createChart(contract: any, sigma: number = 0.0, currentPriceValue: number = 0.0) {

        this.prepareChartScales(contract, currentPriceValue, sigma)
        this.cleanChart()
        this.setupChart()
        this.addAxis()
        this.drawContractProfile(contract)


        this.drawVerticalLineAtStrike(contract, currentPriceValue)
        this.displayInitialCostInfo(contract)
    }

    drawProfileForDaysLeft(contract: any, iv: number, numDaysValue: number) {
        contract.drawProfileForDaysLeft(this.svg, this.x, this.y, this.clipPath, this.xmin, this.xmax, iv, numDaysValue)

    }


    drawAllSigmaLines(contract: any, sigma: number = 0.0, currentPriceValue: number = 0.0) {
        const gdata = contract.getGaussianCurveDate(sigma, currentPriceValue)
        const data_sigma = gdata[0]
        const data_sigma_int = gdata[1]
        const success_rate = gdata[2]
        this.drawSigmaLines(data_sigma, data_sigma_int, contract, success_rate, currentPriceValue, sigma)
    }
}

const Strategy = (charId: string) => {

    const [flag, setFlag] = useState(false);
    const [chart] = useState(new StrategyChart(charId));
    const [drawSigmaLines, setDrawSigmaLines] = useState(false);
    const [numContractsValue, setNumContracts] = useState(consts.strategyDefaultNumContracts);
    const [strikeValue, setStrikeValue] = useState(consts.strategyDefaultStrike);
    const [strike1Value, setStrike1Value] = useState(consts.strategyDefaultStrike1);
    const [strike2Value, setStrike2Value] = useState(consts.strategyDefaultStrike2);
    const [premiumValue, setPremiumValue] = useState(consts.strategyDefaultPremium);
    const [premium1Value, setPremium1Value] = useState(consts.strategyDefaultPremium1);
    const [premium2Value, setPremium2Value] = useState(consts.strategyDefaultPremium2);
    const [viATMValue, setViatmValue] = useState(consts.strategyDefaultVIATM);
    const [numDaysValue, setNumDaysValue] = useState(consts.strategyDefaultNumDays);

    const [currentPriceValue, setCurrentPriceValue] = useState(consts.strategyDefaultCurrentPrice);
    const [pruValue, setPruValue] = useState(consts.strategyDefaultPRU);

    const [sigma, setSigmaValue] = useState(strikeValue * (viATMValue) * Math.sqrt(numDaysValue / 365));
    const [cost, setCost] = useState(0.0);
    const [breakEven, setBreakEven] = useState(0.0);
    const [maxLost, setMaxLost] = useState(0.0);
    const [maxProfit, setMaxProfit] = useState(0.0);

    const [clibBoardData, setClipboardData] = useState("");

    const dummyContract = {
        id: 0,
        ticker: "None",
        type: "Put",
        strike: strikeValue.toString(),
        expiration: "",
        open_by: "",
        close_by: "",
        open_premium: premiumValue.toString(),
        close_premium: premiumValue.toString(),
        qty: numContractsValue.toString(),
    } as IContractRow;
    console.log('dummyContract=', dummyContract);
    //const [theContract, setTheContract] = useState(new Contract.OptionContract([dummyContract] as IContractRow[]));
    const [theContract, setTheContract] = useState(false);
    const [selectedContractType, setSelectedContractType] = useState(consts.strategyDefault);

    async function pasteFromClipboard() {
        try {
            if (!navigator.clipboard) {
                throw new Error("Browser don't have support for native clipboard.");
            }

            const text = await navigator.clipboard.readText();
            //setClipboardData(JSON.parse(text));
            return text;
        } catch (error) {
            console.log(error);
        }
    }

    //useEffect(() => {
    //    console.log('useEffect::clibBoardData=', clibBoardData);
    //}, [clibBoardData]);


    /*****
        useEffect(() => {
            setSigmaValue(strikeValue * (viATMValue) * Math.sqrt(numDaysValue / 365))
        }, [strikeValue, viATMValue, numDaysValue])
    *****/

    function onDrawSigmaLinesChange(event: any) {
        console.log('onDrawSigmaLinesChange::event.target.checked=', event.target.checked)
        setDrawSigmaLines(event.target.checked);
        //let dataFromClipboard = await pasteFromClipboard();
        //console.log('XXX dataFromClipboard=', dataFromClipboard);
    }

    const onCurrentPriceValueChange = (event: any) => {
        setCurrentPriceValue(+event.target.value);
    }
    const onPruChange = (event: any) => {
        setPruValue(+event.target.value);
    }
    const onStrikeChange = (event: any) => {
        setStrikeValue(+event.target.value);
    }
    const onStrike1Change = (event: any) => {
        setStrike1Value(+event.target.value);
    }
    const onStrike2Change = (event: any) => {
        setStrike2Value(+event.target.value);
    }
    const onViATMChange = (event: any) => {
        setViatmValue(+event.target.value);
    }
    const onNumDaysChange = (event: any) => {
        setNumDaysValue(+event.target.value);
    }
    const onPremiumChange = (event: any) => {
        setPremiumValue(+event.target.value);
    }
    const onPremium1Change = (event: any) => {
        setPremium1Value(+event.target.value);
    }
    const onPremium2Change = (event: any) => {
        setPremium2Value(+event.target.value);
    }
    const onNumContractsChange = (event: any) => {
        setNumContracts(+event.target.value);
    }
    const onContractTypeChange = (event: any) => {
        setSelectedContractType(event.target.id);
    }
    /*****

    useEffect(() => {
        const contractData = {
            id: 0,
            ticker: "None",
            type: "Put",
            strike: strikeValue.toString(),
            expiration: "",
            open_by: "",
            close_by: "",
            open_premium: premiumValue.toString(),
            close_premium: premiumValue.toString(),
            qty: numContractsValue.toString(),
            PRU: +pruValue,
        } as IContractRow;
        if (selectedContractType === "Short") {
            contractData.type = "Short";
            contractData.qty = (-numContractsValue).toString();
            setTheContract(new Contract.Short([contractData] as IContractRow[]))

        } else if (selectedContractType === "Long") {
            contractData.type = "Long";
            contractData.qty = (-numContractsValue).toString();
            setTheContract(new Contract.Long([contractData] as IContractRow[]))

        } else if (selectedContractType === "Covered Call") {
            contractData.type = "Covered Call";
            contractData.qty = (-numContractsValue).toString();
            setTheContract(new Contract.CoveredCall([contractData] as IContractRow[]))
            theContract.setPru(pruValue)
            setPruValue(theContract.getPru())
        } else if (selectedContractType === "Short Put") {
            contractData.type = "Put";
            contractData.qty = (-numContractsValue).toString();
            setTheContract(new Contract.Put([contractData] as IContractRow[]))
        } else if (selectedContractType === "Long Put") {
            contractData.type = "Put";
            contractData.qty = (numContractsValue).toString();
            setTheContract(new Contract.Put([contractData] as IContractRow[]))
        } else if (selectedContractType === "Long Call") {
            contractData.type = "Call";
            contractData.qty = (numContractsValue).toString();
            setTheContract(new Contract.Call([contractData] as IContractRow[]))
        } else if (selectedContractType === "Short Call") {
            contractData.type = "Call";
            contractData.qty = (-numContractsValue).toString();
            setTheContract(new Contract.Call([contractData] as IContractRow[]))
        } else if (selectedContractType === "CCS") {

            const contractsData: IContractRow[] = [
                {
                    id: 0,
                    ticker: "None",
                    type: "Call",
                    strike: strike1Value.toString(),
                    expiration: "",
                    open_by: "",
                    close_by: "",
                    open_premium: premium1Value.toString(),
                    close_premium: premium1Value.toString(),
                    qty: numContractsValue.toString(),
                } as IContractRow,
                {
                    id: 0,
                    ticker: "None",
                    type: "Call",
                    strike: strike2Value.toString(),
                    expiration: "",
                    open_by: "",
                    close_by: "",
                    open_premium: premium2Value.toString(),
                    close_premium: premium2Value.toString(),
                    qty: numContractsValue.toString(),
                } as IContractRow
            ]
            contractData.type = "CCS";
            contractData.qty = (-numContractsValue).toString();
            setTheContract(new Contract.CreditCallSpread(contractsData))


        } else if (selectedContractType === "DCS") {
            const contractsData: IContractRow[] = [
                {
                    id: 0,
                    ticker: "None",
                    type: "Call",
                    strike: strike1Value.toString(),
                    expiration: "",
                    open_by: "",
                    close_by: "",
                    open_premium: premium1Value.toString(),
                    close_premium: premium1Value.toString(),
                    qty: numContractsValue.toString(),
                } as IContractRow,
                {
                    id: 0,
                    ticker: "None",
                    type: "Call",
                    strike: strike2Value.toString(),
                    expiration: "",
                    open_by: "",
                    close_by: "",
                    open_premium: premium2Value.toString(),
                    close_premium: premium2Value.toString(),
                    qty: numContractsValue.toString(),
                } as IContractRow
            ]
            contractData.type = "DCS";
            contractData.qty = (-numContractsValue).toString();
            setTheContract(new Contract.DebitCallSpread(contractsData))
        } else if (selectedContractType === "CPS") {

            const contractsData: IContractRow[] = [
                {
                    id: 0,
                    ticker: "None",
                    type: "Put",
                    strike: strike1Value.toString(),
                    expiration: "",
                    open_by: "",
                    close_by: "",
                    open_premium: premium1Value.toString(),
                    close_premium: premium1Value.toString(),
                    qty: numContractsValue.toString(),
                } as IContractRow,
                {
                    id: 0,
                    ticker: "None",
                    type: "Put",
                    strike: strike2Value.toString(),
                    expiration: "",
                    open_by: "",
                    close_by: "",
                    open_premium: premium2Value.toString(),
                    close_premium: premium2Value.toString(),
                    qty: numContractsValue.toString(),
                } as IContractRow
            ]
            contractData.type = "CPS";
            contractData.qty = (-numContractsValue).toString();
            setTheContract(new Contract.CreditPutSpread(contractsData))

        } else if (selectedContractType === "DPS") {

            const contractsData: IContractRow[] = [
                {
                    id: 0,
                    ticker: "None",
                    type: "Put",
                    strike: strike1Value.toString(),
                    expiration: "",
                    open_by: "",
                    close_by: "",
                    open_premium: premium1Value.toString(),
                    close_premium: premium1Value.toString(),
                    qty: numContractsValue.toString(),
                } as IContractRow,
                {
                    id: 0,
                    ticker: "None",
                    type: "Put",
                    strike: strike2Value.toString(),
                    expiration: "",
                    open_by: "",
                    close_by: "",
                    open_premium: premium2Value.toString(),
                    close_premium: premium2Value.toString(),
                    qty: numContractsValue.toString(),
                } as IContractRow
            ]
            contractData.type = "DPS";
            contractData.qty = (-numContractsValue).toString();
            setTheContract(new Contract.DebitPutSpread(contractsData))
        } else {
            contractData.type = ""
        }

        if (theContract.type !== "") {
            let cost = theContract.getInitialCost()
            setCost(cost);
            let breakEven = theContract.getBreakEvenValue();
            setBreakEven(breakEven);
            setMaxProfit(theContract.getMaxProfit())
            setMaxLost(theContract.getMaxLost())
        }

            setFlag(true);
        
    }, [viATMValue, strikeValue, strike1Value, strike2Value,
        premiumValue, premium1Value, premium2Value,
        numContractsValue, selectedContractType, sigma, currentPriceValue, pruValue, drawSigmaLines,flag]);
    *****/

    /*****

    useEffect(() => {
        chart.createChart(theContract, sigma, currentPriceValue);
        chart.drawProfileForDaysLeft(theContract, viATMValue, numDaysValue)
        if (drawSigmaLines) {
            console.log('chart.createChart', theContract)
            chart.drawAllSigmaLines(theContract, sigma, currentPriceValue);
        }
    }, [theContract]);
    *****/


    const displayShareContractTypes = () => {
        return (
            <Row>
            <Col xl= { 3} className = "justify-content-md-left" > Share
                < /Col>
                < Col xl = { 7} className = "justify-content-md-left" >
                    <Form>
                    {
                        ['Short', 'Long'].map((type) => (
                            <Form.Check
                                inline
                                label = { type }
                                name = "group1"
                                type = "radio"
                                id = { type }
                                checked = { type === selectedContractType}
        onChange = { onContractTypeChange }
            />
                        ))}
</Form>
    < /Col>
    < /Row>
        )
    }
const displayOneLegOptionContractTypes = () => {
    return (
        <Row>
        <Col xl= { 3} className = "justify-content-md-left" > Option contracts with 1 leg
            < /Col>
            < Col xl = { 8} className = "justify-content-md-left" >
                <Form>
                {
                    ['Short Put', 'Long Put', 'Long Call', 'Short Call', 'Covered Call'].map((type) => (
                        <Form.Check
                                inline
                                label = { type }
                                name = "group1"
                                type = "radio"
                                id = { type }
                                checked = { type === selectedContractType}
    onChange = { onContractTypeChange }
        />
                        ))}
</Form>
    < /Col>
    < /Row>
        )
    }
const displayTwoLegsOptionContractTypes = () => {
    return (
        <Row>
        <Col xl= { 3} className = "justify-content-md-left" > Option contracts with 2 legs
            < /Col>
            < Col xl = { 8} className = "justify-content-md-left" >
                <Form>
                {
                    ['CCS', 'CPS', 'DCS', 'DPS'].map((type) => (
                        <Form.Check
                                inline
                                label = { type }
                                name = "group1"
                                type = "radio"
                                id = { type }
                                checked = { type === selectedContractType}
    onChange = { onContractTypeChange }
        />
                        ))}
</Form>
    < /Col>
    < /Row>
        )
    }
const displayContractNumbers = () => {
    return (

        <Row className= "bg-secondary" >
        <Col xl={ 3 } className = "justify-content-md-left" > Quantity
            < /Col>
            < Col xl = { 2} className = "text-sm-end param_text" >
                    #{ numContractsValue }
    </Col>
        < Col xl = { 2} className = "justify-content-md-left" >
            <Form.Range
                        min={ 1 }
    max = { 10}
    step = { 1}
    value = { numContractsValue }
    onChange = { onNumContractsChange } >
        </Form.Range>
        < /Col>
        < /Row>
        )
    }
const displayNoLegContractParameters = () => {
    return (
        <div>
        No leg contract
            < /div>
        )
    }
const displayOneLegContractParameters = () => {
    return (
        <Row className= "bg-secondary" >
        <Col xl={ 3 } className = "text-sm-end param_text" >
            { selectedContractType }
            < /Col>
            < Col xl = { 1} className = "text-sm-end param_text" >
                Strike
                < /Col>
                < Col xl = { 1} className = "text-sm-left param_text" >
                    { strikeValue } USD
                        < /Col>
                        < Col xl = { 2} className = "justify-content-md-left" >
                            <Form.Range
                        min={ 2 }
    max = { 200}
    step = { 0.1}
    value = { strikeValue }
    onChange = { onStrikeChange } >
        </Form.Range>
        < /Col>
        < Col xl = { 1} className = "text-sm-end param_text" >
            Premium
            < /Col>
            < Col xl = { 1} className = "text-sm-left param_text" >
                { premiumValue } USD
                    < /Col>
                    < Col xl = { 2} className = "justify-content-md-left" >
                        <Form.Range
                        min={ 0 }
    max = { 10}
    step = { 0.01}
    value = { premiumValue }
    onChange = { onPremiumChange } >
        </Form.Range>
        < /Col>
        < /Row>
        )
    }
const displayTwoLegsContractParameters = () => {
    return (
        <div>
        <Row className= "bg-secondary" >
        <Col xl={ 1 } className = "text-sm-end param_text" > Leg1 < /Col>
            < Col xl = { 2} className = "text-sm-end param_text" >
                { selectedContractType === "CCS" || selectedContractType === "DPS" ? "Short " : "Long "
}
{ selectedContractType === "CCS" || selectedContractType === "DCS" ? "Call" : "Put" }
</Col>
    < Col xl = { 1} className = "text-sm-end param_text" >
        Strike1
        < /Col>
        < Col xl = { 1} className = "text-sm-left param_text" >
            { strike1Value }
            < /Col>
            < Col xl = { 2} className = "justify-content-md-left" >
                <Form.Range
                            min={ 2 }
max = { 200}
step = { 0.1}
value = { strike1Value }
onChange = { onStrike1Change } >
    </Form.Range>
    < /Col>
    < Col xl = { 1} className = "text-sm-end param_text" >
        Premium1
        < /Col>
        < Col xl = { 1} className = "text-sm-left param_text" >
            { premium1Value }
            < /Col>
            < Col xl = { 2} className = "justify-content-md-left" >
                <Form.Range
                            min={ 0 }
max = { 10}
step = { 0.01}
value = { premium1Value }
onChange = { onPremium1Change } >
    </Form.Range>
    < /Col>
    < /Row>
    < Row className = "bg-secondary" >
        <Col xl={ 1 } className = "text-sm-end param_text" > Leg2 < /Col>
            < Col xl = { 2} className = "text-sm-end param_text" >
                { selectedContractType === "CCS" || selectedContractType === "DPS" ? "Long " : "Short "}
{ selectedContractType === "CCS" || selectedContractType === "DCS" ? "Call" : "Put" }
</Col>
    < Col xl = { 1} className = "text-sm-end param_text" >
        Strike2
        < /Col>
        < Col xl = { 1} className = "text-sm-left param_text" >
            { strike2Value }
            < /Col>
            < Col xl = { 2} className = "justify-content-md-left" >
                <Form.Range
                            min={ 2 }
max = { 200}
step = { 0.1}
value = { strike2Value }
onChange = { onStrike2Change } >
    </Form.Range>
    < /Col>
    < Col xl = { 1} className = "text-sm-end param_text" >
        Premium2
        < /Col>
        < Col xl = { 1} className = "text-sm-left param_text" >
            { premium2Value }
            < /Col>
            < Col xl = { 2} className = "justify-content-md-left" >
                <Form.Range
                            min={ 0 }
max = { 10}
step = { 0.01}
value = { premium2Value }
onChange = { onPremium2Change } >
    </Form.Range>
    < /Col>
    < /Row>
    < /div>
        )
    }
const displayContractParameters = (contract: any) => {
    if (typeof (contract) === "boolean") {


        return (<div></div>)
        }
    if (contract.getLegs() === 0) {
        return (displayNoLegContractParameters())
    }
    else if (contract.getLegs() === 1) {
        return (displayOneLegContractParameters())
    }
    else {
        return (displayTwoLegsContractParameters())
    }
}
const displaySigmaLinesSelector = () => {
    return (
        <div>
        <Row>

        <Col xl= { 3} className = "justify-content-md-left" > VI ATM
            < /Col>
            < Col xl = { 2} className = "text-sm-end param_text" >
                {(viATMValue * 100).toFixed(1)
} %
    </Col>
    < Col xl = { 2} className = "justify-content-md-left" >
        <Form.Range
                            min={ 0.01 }
max = { 1}
step = { 0.001}
value = { viATMValue }
onChange = { onViATMChange } >
    </Form.Range>
    < /Col>
    < /Row>

    < Row >
    <Col xl={ 3 } className = "justify-content-md-left test" > Number of days
        < /Col>
        < Col xl = { 2} className = "text-sm-end param_text " >
            { numDaysValue } day{ numDaysValue > 1 ? "s" : "" } left
                < /Col>
                < Col xl = { 2} className = "justify-content-md-left" >
                    <Form.Range
                            min={ 1 }
max = { 700}
step = { 1}
value = { numDaysValue }
onChange = { onNumDaysChange } >
    </Form.Range>
    < /Col>
    < /Row>
    < Row >
    <Col xl={ 3 } className = "justify-content-md-left" >
        <Form>
        <div key={ `default-checkbox` } className = "mb-3" >
            <Form.Check // prettier-ignore
                                    type='checkbox'
id = {`default-checkbox`}
label = 'Draw sigma lines'
checked = { drawSigmaLines }
onChange = { onDrawSigmaLinesChange }
    />
    </div>
    < /Form>
    < /Col>
    < /Row>
    < /div>
        )
    }
const displayPriceInfo = () => {
    return (
        <div>

        <Row>
        <Col xl= { 3} className = "justify-content-md-left" > Current price
            < /Col>
            < Col xl = { 2} className = "text-sm-end param_text" >
                { currentPriceValue } USD
                    < /Col>
                    < Col xl = { 2} className = "justify-content-md-left" >
                        <Form.Range
                            min={ 2 }
    max = { 200}
    step = { 0.1}
    value = { currentPriceValue }
    onChange = { onCurrentPriceValueChange } >
        </Form.Range>
        < /Col>
        < /Row>


    {
        selectedContractType !== "Covered Call" && selectedContractType !== "Short" && selectedContractType !== "Long" ?
        <Row>
        <Col xl={ 3 } className = "justify-content-md-left" >& nbsp;
        </Col>

            < /Row>
                    :
<Row>

    <Col xl={ 3 } className = "justify-content-md-left" > PRU
        < /Col>
        < Col xl = { 2} className = "text-sm-end param_text" >
            { pruValue } USD
                < /Col>
                < Col xl = { 2} className = "justify-content-md-left" >
                    <Form.Range
                                min={ 2 }
max = { 200}
step = { 0.1}
value = { pruValue }
onChange = { onPruChange } >
    </Form.Range>
    < /Col>
    < /Row>
                }

<Row>
    <Col xl={ 3 } className = "justify-content-md-left" > Sigma
        < /Col>
        < Col xl = { 2} className = "text-sm-end param_text" >
            { sigma.toFixed(2) }
            < /Col>
            < /Row>
            < Row >
            <Col xl={ 3 } className = "justify-content-md-left" > Initial P & L
                < /Col>
                < Col xl = { 2} className = "text-sm-end param_text" >
                    { cost.toFixed(0) } USD
                        < /Col>
                        < /Row>
                        < Row >
                        <Col xl={ 2 } className = "justify-content-md-left" > Break - even
                            < /Col>
                            < Col xl = { 3} className = "text-sm-end param_text" >
                                { breakEven.toFixed(2) } USD
                                    < /Col>
                                    < /Row>
                                    < Row >
                                    <Col xl={ 2 } className = "justify-content-md-left" > P & L limits
                                        < /Col>
                                        < Col xl = { 3} className = "text-sm-end param_text" >
                                            from { maxLost.toFixed(0) } USD to { maxProfit.toFixed(0) } USD
                                                < /Col>
                                                < /Row>
                                                < /div >
        )
    }

return (
    <Container fluid >
    <Row>
    <Col>
    { displayShareContractTypes() }
                    { displayOneLegOptionContractTypes() }
{ displayTwoLegsOptionContractTypes() }
{ displayContractNumbers() }
{ displayContractParameters(theContract) }

</Col>
    <Col>
{ displayPriceInfo() }
</Col>
    < /Row>
    < Row >
    <Col>
    <div id={ charId }> </div>
        < /Col>
        < /Row>
        < /Container>

    );
};
//                     {theContract.getLegs() > 0 ? displaySigmaLinesSelector() : <div></div>}

export default Strategy;
